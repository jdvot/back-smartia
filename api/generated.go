// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for DocumentOcrStatus.
const (
	DocumentOcrStatusCompleted  DocumentOcrStatus = "completed"
	DocumentOcrStatusFailed     DocumentOcrStatus = "failed"
	DocumentOcrStatusPending    DocumentOcrStatus = "pending"
	DocumentOcrStatusProcessing DocumentOcrStatus = "processing"
)

// Defines values for DocumentStatus.
const (
	DocumentStatusCompleted  DocumentStatus = "completed"
	DocumentStatusFailed     DocumentStatus = "failed"
	DocumentStatusProcessing DocumentStatus = "processing"
	DocumentStatusUploaded   DocumentStatus = "uploaded"
)

// Defines values for DocumentSummaryStatus.
const (
	DocumentSummaryStatusCompleted  DocumentSummaryStatus = "completed"
	DocumentSummaryStatusFailed     DocumentSummaryStatus = "failed"
	DocumentSummaryStatusPending    DocumentSummaryStatus = "pending"
	DocumentSummaryStatusProcessing DocumentSummaryStatus = "processing"
)

// Defines values for OCRResponseDataStatus.
const (
	OCRResponseDataStatusCompleted  OCRResponseDataStatus = "completed"
	OCRResponseDataStatusFailed     OCRResponseDataStatus = "failed"
	OCRResponseDataStatusPending    OCRResponseDataStatus = "pending"
	OCRResponseDataStatusProcessing OCRResponseDataStatus = "processing"
)

// Defines values for SummaryResponseDataStatus.
const (
	Completed  SummaryResponseDataStatus = "completed"
	Failed     SummaryResponseDataStatus = "failed"
	Pending    SummaryResponseDataStatus = "pending"
	Processing SummaryResponseDataStatus = "processing"
)

// Document defines model for Document.
type Document struct {
	// Filename Original filename
	Filename string `json:"filename"`

	// Id Unique document identifier
	Id string `json:"id"`

	// MimeType MIME type of the document
	MimeType string `json:"mimeType"`

	// OcrStatus OCR processing status
	OcrStatus *DocumentOcrStatus `json:"ocrStatus,omitempty"`

	// OcrText Extracted text from OCR
	OcrText *string `json:"ocrText"`

	// Size File size in bytes
	Size int `json:"size"`

	// Status Current processing status
	Status DocumentStatus `json:"status"`

	// Summary AI-generated summary
	Summary *string `json:"summary"`

	// SummaryStatus Summary generation status
	SummaryStatus *DocumentSummaryStatus `json:"summaryStatus,omitempty"`

	// UploadDate Upload timestamp
	UploadDate time.Time `json:"uploadDate"`

	// UserId ID of the user who uploaded the document
	UserId string `json:"userId"`
}

// DocumentOcrStatus OCR processing status
type DocumentOcrStatus string

// DocumentStatus Current processing status
type DocumentStatus string

// DocumentSummaryStatus Summary generation status
type DocumentSummaryStatus string

// DocumentHistoryResponse defines model for DocumentHistoryResponse.
type DocumentHistoryResponse struct {
	Data *struct {
		Documents  *[]Document `json:"documents,omitempty"`
		Pagination *struct {
			// Limit Number of items per page
			Limit *int `json:"limit,omitempty"`

			// Page Current page number
			Page *int `json:"page,omitempty"`

			// Total Total number of documents
			Total *int `json:"total,omitempty"`

			// TotalPages Total number of pages
			TotalPages *int `json:"totalPages,omitempty"`
		} `json:"pagination,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// DocumentResponse defines model for DocumentResponse.
type DocumentResponse struct {
	Data    *Document `json:"data,omitempty"`
	Message *string   `json:"message,omitempty"`
	Success *bool     `json:"success,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error code
	Error *string `json:"error,omitempty"`

	// Message Error message
	Message string `json:"message"`
	Success bool   `json:"success"`

	// Timestamp Error timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// OCRResponse defines model for OCRResponse.
type OCRResponse struct {
	Data *struct {
		// DocId Document ID
		DocId *string `json:"docId,omitempty"`

		// OcrText Extracted text from OCR
		OcrText *string `json:"ocrText"`

		// Status OCR processing status
		Status *OCRResponseDataStatus `json:"status,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// OCRResponseDataStatus OCR processing status
type OCRResponseDataStatus string

// SummaryResponse defines model for SummaryResponse.
type SummaryResponse struct {
	Data *struct {
		// DocId Document ID
		DocId *string `json:"docId,omitempty"`

		// Status Summary generation status
		Status *SummaryResponseDataStatus `json:"status,omitempty"`

		// Summary AI-generated summary
		Summary *string `json:"summary"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// SummaryResponseDataStatus Summary generation status
type SummaryResponseDataStatus string

// UploadResponse defines model for UploadResponse.
type UploadResponse struct {
	Data    *Document `json:"data,omitempty"`
	Message *string   `json:"message,omitempty"`
	Success *bool     `json:"success,omitempty"`
}

// GetDocumentHistoryParams defines parameters for GetDocumentHistory.
type GetDocumentHistoryParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of documents per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadDocumentMultipartBody defines parameters for UploadDocument.
type UploadDocumentMultipartBody struct {
	// File The document file to upload
	File openapi_types.File `json:"file"`
}

// UploadDocumentMultipartRequestBody defines body for UploadDocument for multipart/form-data ContentType.
type UploadDocumentMultipartRequestBody UploadDocumentMultipartBody
